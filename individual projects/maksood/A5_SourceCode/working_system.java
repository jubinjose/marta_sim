package edu.MTSSimulation;

import java.util.ArrayList;
import java.util.Scanner;
import java.io.File;

public class working_system {

    public static void main(String[] args) {

        if(args.length <= 0){
            System.out.println("Please pass Scenario File Name as parameter: java -jar working_system.jar test_scenario.txt");
            return;
        }

        final String DELIMITER = ",";
        String scenarioFile = args[0];

        try {
            Scanner takeCommand = new Scanner(new File(scenarioFile));
            String[] tokens;

            // Objects Orchestration
            EventHandler eventHandler = new EventHandler();

            // Step 1: Read the data from the provided scenario configuration file

            do {
                String userCommandLine = takeCommand.nextLine();
                tokens = userCommandLine.split(DELIMITER);
                // System.out.println(tokens[0]);

                switch (tokens[0]) {
                    case "add_depot":
                        // This command creates a special bus/repair depot  stop object with a give <Name>
                        // located on the travel map at the location <Latitude>, <Longitude>.
                        // add_depot, <ID>, <Name>, <Latitude>, <Longitude>
                        Integer transitDepotID = Integer.parseInt(tokens[1]);
                        String transitDepotName = tokens[2].split("/")[1];
                        String transitDepotAbbreviation = tokens[2].split("/")[0];
                        Location transitDepotLocation = new Location(Double.parseDouble(tokens[3]), Double.parseDouble(tokens[4]));
                        Integer transitDepotRiders = 0;
                        Boolean isDepot = true;

                        TransitStop transitDepot = new TransitStop(transitDepotID, transitDepotName, transitDepotAbbreviation, transitDepotLocation,
                                transitDepotRiders, isDepot);
                        eventHandler.addTransitStopObject(transitDepotID, transitDepot);

                        break;
                    case "add_stop":
                        // add_stop, <ID>, <Name>, <Riders>, <Latitude>, <Longitude>
                        // This command creates a stop object with a give <Name>, and an initial number of <Riders>,
                        // located on the travel map at the location <Latitude>, <Longitude>.

                        //System.out.println(", <ID>:" + tokens[1] + ", <Name>:" + tokens[2] + ", <Riders>:" + tokens[3] + ", <Latitude>:" + tokens[4] + ", <Longitude>:" + tokens[5]);
                        Integer transitStopID = Integer.parseInt(tokens[1]);
                        String[] transitStopNameAbbreviation = tokens[2].split("/");
                        String transitStopName = null;
                        String transitStopAbbreviation = null;
                        if (transitStopNameAbbreviation.length > 1) {
                            transitStopAbbreviation = transitStopNameAbbreviation[0];
                            transitStopName = transitStopNameAbbreviation[1];
                        } else {
                            transitStopName = transitStopNameAbbreviation[0];
                        }

                        Integer transitStopRiders = Integer.parseInt(tokens[3]);
                        Location transitStopLocation = new Location(Double.parseDouble(tokens[4]), Double.parseDouble(tokens[5]));
                        Boolean isTransitDepot = false;

                        TransitStop transitStop = new TransitStop(transitStopID, transitStopName, transitStopAbbreviation, transitStopLocation,
                                transitStopRiders, isTransitDepot);
                        eventHandler.addTransitStopObject(transitStopID, transitStop);

                        break;
                    case "add_route":
                        // add_route, <ID>, <Number>, <Name>
                        // This command creates a route object with a given <Name> and <Number>. The route initially
                        // doesn’t have any stops.

                        //System.out.println(", <ID>:" + tokens[1] + ", <Number>:" + tokens[2] + ", <Name>:" + tokens[3]);
                        Integer routeID = Integer.parseInt(tokens[1]);
                        Integer routeNumber = Integer.parseInt(tokens[2]);
                        String routeName = tokens[3];

                        Route routeObject = new Route(routeID, routeNumber, routeName);
                        eventHandler.addRouteObject(routeID, routeObject);

                        break;
                    case "extend_route":
                        // extend_route, <Route ID>, <Stop ID>
                        // This command appends the stop designated by <Stop ID> to the end of the route designated by
                        // <Route ID>. The ID values are the ones generated by the simulation system, not the “user facing”
                        // numbers and names entered with the commands.

                        //System.out.println(", <Route ID>:" + tokens[1] + ", <Stop ID>:" + tokens[2]);
                        Integer extendRouteID = Integer.parseInt(tokens[1]);
                        Integer routeStopID = Integer.parseInt(tokens[2]);

                        Route extendRouteObject = eventHandler.getEventRouteObjects().get(extendRouteID);
                        TransitStop addTransitStopObject = eventHandler.getEventTransitObjects().get(routeStopID);
                        extendRouteObject.addRouteStop(addTransitStopObject);

                        break;
                    case "add_bus":
                        // add_bus, <ID>, <Route>, <Location>, <Initial Passengers>, <PassengerCapacity>, <Initial Fuel>, <Fuel Capacity>, <Speed>
                        // This command creates a bus object with identifier <ID> that travels along <Route>, starting at
                        // index <Location> within the <Route> list, and carrying an initial number of <Initial Passengers>
                        // riders. Also, the bus can hold at most <Passenger Capacity> passengers, and travels along the
                        // route at the given <Speed> as measured in statute miles per hour. Also, the bus begins with an
                        // amount of fuel needed to travel a distance of <Initial Fuel> statute miles. The bus, when fully
                        // refueled, can travel a maximum distance of <Fuel Capacity> miles.

                        // System.out.println(", <ID>:" + tokens[1] + ", <Route>:" + tokens[2] + ", <Location>:" + tokens[3] + ",
                        // <Initial Passengers>:" + tokens[4] + ", <Passenger Capacity>:" + tokens[5] + ", <Initial Fuel>:" +
                        // tokens[6] + ", <Fuel Capacity>:" + tokens[7] + ", <Speed>:" + tokens[8]);
                        // add_bus,id:67,route:52,location:0,riders:0,ridersCapacity:15,initFuel:10000,fuelCapacity:10000,speed:27

                        Integer busID = Integer.parseInt(tokens[1]);
                        Integer busRouteID = Integer.parseInt(tokens[2]);
                        Route busRouteObject = eventHandler.getEventRouteObjects().get(busRouteID);

                        Integer busCurrentRouteTransitStopIndex = Integer.parseInt(tokens[3]);
                        Integer busNextRouteTransitStopIndex = busCurrentRouteTransitStopIndex;

                        Location busTransitStopLocationObject = busRouteObject.getRouteTransitStopLocation(busCurrentRouteTransitStopIndex);

                        Integer busRiders = Integer.parseInt(tokens[4]);
                        Integer busRidersCapacity = Integer.parseInt(tokens[5]);
                        Double busFuel =  Double.parseDouble(tokens[6]);
                        Double busFuelCapacity =  Double.parseDouble(tokens[7]);
                        Double busSpeed =  Double.parseDouble(tokens[8]);

                        Bus busObject = new Bus(busID, busRouteObject, busTransitStopLocationObject, busRiders, busRidersCapacity,
                                                busFuel, busFuelCapacity, busSpeed, busCurrentRouteTransitStopIndex, busNextRouteTransitStopIndex);
                        eventHandler.addBusObject(busID, busObject);
                        break;
                    case "add_event":
                        // add_event, <Time>, <Type>, <ID>
                        // This command creates an event object that will be executed when the simulation reaches “logical
                        // time” <Time>. When executed, the system will perform the actions corresponding to the event
                        // <Type> using the object designated by <ID>.

                        // System.out.println(", <Time>:" + tokens[1] + ", <Type>:" + tokens[2] + ", <ID>:" + tokens[3]);
                        //add_event,0,move_bus,67
                        Integer eventRank = Integer.parseInt(tokens[1]);
                        String eventType = tokens[2];
                        Integer eventBusID = Integer.parseInt(tokens[3]);

                        Event busEvent = new Event(eventRank, eventType, eventBusID);
                        eventHandler.addEvent(busEvent);
                        break;
                    default:
                        System.out.println(" command not recognized");
                        break;
                }
            } while (takeCommand.hasNextLine());

            takeCommand.close();

            // Step 2-6 happens here
            eventHandler.processEvents();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println();
        }
    }

}
